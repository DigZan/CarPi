#!/usr/bin/env bash
set -euo pipefail

# CarPi installer for Raspberry Pi OS (Bookworm recommended)
# Usage:
#   curl -fsSL https://raw.githubusercontent.com/yourname/CarPi/main/install.sh | sudo bash
# Optional env var to customize repo:
#   REPO_URL=https://github.com/<you>/CarPi.git BRANCH=main bash install.sh

REPO_URL="${REPO_URL:-https://github.com/DigZan/CarPi.git}"
BRANCH="${BRANCH:-main}"
INSTALL_DIR="/opt/carpi"
APP_USER="carpi"
APP_GROUP="carpi"
LOG_DIR="/var/log/carpi"

echo "[CarPi] Installing from ${REPO_URL} (branch: ${BRANCH})"

if ! command -v git >/dev/null 2>&1; then
  apt-get update
fi

apt-get install -y \
  git python3 python3-venv python3-pip \
  i2c-tools \
  bluez bluez-tools \
  sqlite3 rsync curl

# Enable I2C and serial (best effort; ignore if raspi-config not present)
if command -v raspi-config >/dev/null 2>&1; then
  echo "[CarPi] Enabling I2C and serial (UART)"
  raspi-config nonint do_i2c 0 || true
  # disable login shell over serial, enable serial port
  raspi-config nonint do_serial 2 || true
fi

# Create user and directories
getent group "${APP_GROUP}" >/dev/null 2>&1 || groupadd "${APP_GROUP}"
if ! id -u "${APP_USER}" >/dev/null 2>&1; then
  useradd -m -g "${APP_GROUP}" -s /usr/sbin/nologin -G gpio,i2c,spi,video,bluetooth,plugdev,dialout,audio "${APP_USER}" || true
fi
mkdir -p "${INSTALL_DIR}" "${LOG_DIR}"
chown -R "${APP_USER}:${APP_GROUP}" "${INSTALL_DIR}" "${LOG_DIR}"

# Clone or update repo into INSTALL_DIR
if [ ! -d "${INSTALL_DIR}/.git" ]; then
  echo "[CarPi] Cloning repository..."
  sudo -u "${APP_USER}" git clone --depth 1 -b "${BRANCH}" "${REPO_URL}" "${INSTALL_DIR}"
else
  echo "[CarPi] Repo exists, fetching latest..."
  pushd "${INSTALL_DIR}" >/dev/null
  sudo -u "${APP_USER}" git fetch --all --prune
  sudo -u "${APP_USER}" git checkout "${BRANCH}"
  sudo -u "${APP_USER}" git pull --ff-only
  popd >/dev/null
fi

# Python venv and requirements
if [ ! -d "${INSTALL_DIR}/venv" ]; then
  echo "[CarPi] Creating Python venv"
  sudo -u "${APP_USER}" python3 -m venv "${INSTALL_DIR}/venv"
fi
echo "[CarPi] Installing Python dependencies"
sudo -u "${APP_USER}" "${INSTALL_DIR}/venv/bin/pip" install --upgrade pip wheel
sudo -u "${APP_USER}" "${INSTALL_DIR}/venv/bin/pip" install -r "${INSTALL_DIR}/requirements.txt"

# Create default .env if missing
if [ ! -f "${INSTALL_DIR}/.env" ]; then
  if [ -f "${INSTALL_DIR}/.env.example" ]; then
    cp "${INSTALL_DIR}/.env.example" "${INSTALL_DIR}/.env"
  else
    cat > "${INSTALL_DIR}/.env" <<'EOF'
# Generated by install.sh
CARPI_LOG_DIR=/var/log/carpi
CARPI_DB_PATH=/opt/carpi/data/carpi.sqlite
BME280_INTERVAL=1.0
ICM20948_INTERVAL=0.0
GPS_SERIAL_PORT=/dev/ttyS0
GPS_BAUD=9600
FAN_PWM_PIN=18
FAN_DEFAULT_DUTY=0
EOF
  fi
  chown "${APP_USER}:${APP_GROUP}" "${INSTALL_DIR}/.env"
fi

# Install systemd units
echo "[CarPi] Installing systemd services"
cp "${INSTALL_DIR}/systemd/carpi.service" /etc/systemd/system/
cp "${INSTALL_DIR}/systemd/carpi-update.service" /etc/systemd/system/
cp "${INSTALL_DIR}/systemd/carpi-update.timer" /etc/systemd/system/
systemctl daemon-reload
systemctl enable carpi.service
systemctl enable --now carpi-update.timer
systemctl restart carpi.service || systemctl start carpi.service

echo "[CarPi] Installation complete. Use: systemctl status carpi.service"


